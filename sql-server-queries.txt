-- find top 10 highest revenue generating products
Select top 10 product_id, sum(new_sale_price) as sales 
from df_orders 
group by product_id
order by sales desc;

-- find top 5 highest selling products in each region
With cte as(
Select region, product_id,SUM(new_sale_price) as sales
from df_orders
group by product_id, region)


Select * from (
Select *,
row_number() over(partition by region order by sales desc) as rn
from cte) A
where rn <=5


-- find month over month growth comparison for 2022 and 2023 sales eg: jan 2022 vs jan 2023
-- option 1
-- Potential Issue:
-- If any month in 2022 or 2023 is missing from the data (for example, if there are no sales in a specific month), this could result in incorrect aggregation or missing months in the output.
With cte as (
Select year(order_date) as order_year, MONTH(order_date) as order_month,
sum(new_sale_price) as sales 
from df_orders
group by YEAR(order_date), MONTH(order_date))

select order_month,
SUM(case when order_year=2022 then sales else 0 end) as sales_2022,
SUM(case when order_year=2023 then sales else 0 end) as sales_2023
from cte
group by order_month
order by order_month

-- option 2
WITH cte AS (
    SELECT 
        YEAR(order_date) AS order_year, 
        MONTH(order_date) AS order_month,
        SUM(new_sale_price) AS sales
    FROM df_orders
    WHERE YEAR(order_date) IN (2022, 2023)
    GROUP BY YEAR(order_date), MONTH(order_date)
)

SELECT 
    order_month,
    ISNULL([2022], 0) AS sales_2022,
    ISNULL([2023], 0) AS sales_2023
FROM cte
PIVOT (
    SUM(sales)
    FOR order_year IN ([2022], [2023])
) AS pvt
ORDER BY order_month;

-- option 3
SELECT 
    MONTH(order_date) AS order_month,
    SUM(CASE WHEN YEAR(order_date) = 2022 THEN new_sale_price ELSE 0 END) AS sales_2022,
    SUM(CASE WHEN YEAR(order_date) = 2023 THEN new_sale_price ELSE 0 END) AS sales_2023
FROM df_orders
WHERE YEAR(order_date) IN (2022, 2023)
GROUP BY MONTH(order_date)
ORDER BY order_month;


-- for each category which month had the highest sales
-- option 1
With cte as(
Select category, FORMAT(order_date, 'yyyyMM') as order_year_month, SUM(new_sale_price) as sales
from df_orders
group by category, FORMAT(order_date, 'yyyyMM'))

select * from(
Select * , ROW_NUMBER() over(partition by category order by sales desc) as rn
from cte) A
where rn = 1
order by category;

--option 2
WITH cte AS (
    SELECT 
        category, 
        YEAR(order_date) AS order_year, 
        MONTH(order_date) AS order_month,
        SUM(new_sale_price) AS sales
    FROM df_orders
    GROUP BY category, YEAR(order_date), MONTH(order_date)
)

SELECT *
FROM (
    SELECT 
        *, 
        ROW_NUMBER() OVER (PARTITION BY category ORDER BY sales DESC) AS rn
    FROM cte
) A
WHERE rn = 1
ORDER BY category;


-- which sub-category had highest growth by profit in 2023 compare to 2022
-- option 1
With cte as (
Select sub_category, year(order_date) as order_year,
sum(new_sale_price) as sales 
from df_orders
group by sub_category, YEAR(order_date))
, cte2 as (
select sub_category,
SUM(case when order_year=2022 then sales else 0 end) as sales_2022,
SUM(case when order_year=2023 then sales else 0 end) as sales_2023
from cte
group by sub_category)

Select top 1 *,
((sales_2023 - sales_2022) * 100 / sales_2022) as '%_growth'
from cte2
order by '%_growth' desc

--option 2
WITH cte AS (
    SELECT 
        sub_category, 
        YEAR(order_date) AS order_year,
        SUM(new_sale_price) AS sales 
    FROM df_orders
    GROUP BY sub_category, YEAR(order_date)
),

cte2 AS (
    SELECT 
        sub_category,
        ISNULL(SUM(CASE WHEN order_year = 2022 THEN sales ELSE 0 END), 0) AS sales_2022,
        ISNULL(SUM(CASE WHEN order_year = 2023 THEN sales ELSE 0 END), 0) AS sales_2023
    FROM cte
    GROUP BY sub_category
)

SELECT TOP 1 
    sub_category,
    sales_2022,
    sales_2023,
    ((sales_2023 - sales_2022) * 100.0 / NULLIF(sales_2022, 0)) AS year_diff
FROM cte2
ORDER BY year_diff DESC;


Select sub_category, year(order_date) as order_year,
sum(new_sale_price) as sales 
from df_orders
group by sub_category, YEAR(order_date)
order by sum(new_sale_price) desc;